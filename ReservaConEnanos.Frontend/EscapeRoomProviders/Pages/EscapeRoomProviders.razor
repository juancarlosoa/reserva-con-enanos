@page "/providers"

@using ReservaConEnanos.Frontend.EscapeRoomProviders.Entities
@using ReservaConEnanos.Frontend.EscapeRoomProviders.Services
@using ReservaConEnanos.Frontend.EscapeRoomProviders.Components

@inject IEscapeRoomProviderService ProviderService
@inject NavigationManager Nav

<MudContainer>
    <MudText Typo="Typo.h4" Class="my-4">Salas de Escape</MudText>
@if (isLoading)
{
    <MudGrid>
        @for (int i = 0; i < 4; i++)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <MudSkeleton Height="300px" Width="100%" />
            </MudItem>
        }
    </MudGrid>
} else {
    <MudGrid>
        @foreach (var provider in providers)
        {
            <MudItem xs="12" sm="6" md="4" lg="3">
                <EscapeRoomProviderCard Provider="provider" />
            </MudItem>
        }
    </MudGrid>
}
</MudContainer>

@code 
{
    private List<EscapeRoomProvider> providers = [];
    private int currentPage = 0;
    private const int pageSize = 12;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadProviders();
    }

    private async Task LoadProviders()
    {
        if (isLoading) return;

        isLoading = true;
        var newProviders =  (await ProviderService.GetAllProvidersAsync())?.ToList();

        if (newProviders is not null) {
            providers?.AddRange(newProviders);
            currentPage++;
        }
        isLoading = false;
    }

    void NavigateToDetails(Guid providerId)
    {
        Nav.NavigateTo($"/providers/{providerId}");
    }
}